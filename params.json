{"name":"Rhonda","tagline":"A composer package that provides solutions to common PHP tasks","body":"#Help me \\Rhonda\r\nRhonda is a composer installable package that provides solutions to common PHP tasks.\r\n\r\n##Install\r\n```shell\r\n  composer require peledies/rhonda:~1\r\n  composer install\r\n```\r\n\r\n##Require in your project\r\nAdd the folowing to your composer.json file\r\n```php\r\n  \"require\": {\r\n    \"peledies/rhonda\": \"~1\"\r\n  }\r\n```\r\n\r\n#Classes and Methods\r\n\r\n##\\Rhonda\\UUID\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| create()  | Create a new UUID  |\r\n```php\r\n  \\Rhonda\\UUID::create();\r\n```\r\nOR\r\n```php\r\n  $uuid = new \\Rhonda\\UUID();\r\n  $uuid->create();\r\n```\r\n\r\n\r\n##\\Rhonda\\RequestBody\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| get()  | Get the provided request body  |\r\n```php\r\n  \\Rhonda\\RequestBody::get();\r\n```\r\nOR\r\n```php\r\n  $request_body = new \\Rhonda\\RequestBody();\r\n  $request_body->get();\r\n```\r\n\r\n\r\n##\\Rhonda\\Success\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| create()  | create a uniform success message   |\r\n```php\r\n  echo \\Rhonda\\Success:: create();\r\n```\r\nOR\r\n```php\r\n  $msg = new \\Rhonda\\Success();\r\n  echo $msg->create();\r\n```\r\n\r\n\r\n##\\Rhonda\\Error\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| handle()  | Fromat an exception for return. Also writes a pretty stack trace to the error log   |\r\n| deprecation_warning(**message, alternate route**) | Adds a `Warning` header and changes the status code to `299` |\r\n```php\r\n  try{\r\n    throw new Exception(\"Demo Error Exception\");\r\n  }catch(\\Exception $e){\r\n    echo \\Rhonda\\Error::handle($e);\r\n  }\r\n```\r\nOR\r\n```php\r\n  try{\r\n    throw new Exception(\"Demo Error Exception\");\r\n  }catch(\\Exception $e){\r\n    $error = new \\Rhonda\\Error();\r\n    echo $error->handle($e);\r\n  }\r\n```\r\n\r\n\r\n##\\Rhonda\\Config\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| load_file()  | Load a JSON file into memory as an object for later retrieval  |\r\n| load_object()  | Load an object into memory for later retrieval  |\r\n| get()  | Retrieve a configuration object from memory  |\r\nLoad Object to memory\r\n```php\r\n  $object = new stdClass();\r\n  $object->thing_1 = 'something one';\r\n  $object->thing_2 = 'something two';\r\n  \\Rhonda\\Config::load_object('test_one', $object);\r\n```\r\nLoad JSON file to memory\r\n```php\r\n  // File path is relative to your project root\r\n  $config->load_file('test_two', 'path/to/file.json');\r\n```\r\nRetrieve a configuration object from memory\r\n```php\r\n\\Rhonda\\Config::get('test_one');\r\n```\r\n\r\n\r\n##\\Rhonda\\APIGateway\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| run()  | Run a request to an external URL  |\r\n\r\n\r\nMake a request to an external address with custom headers and a request body\r\n```php\r\ntry{\r\n  $headers = array(\"Domain\"=>\"domain_1\", \"Authorization\"=>\"sometoken\");\r\n  $data = (object) array(\"handle\"=>\"demo_1\", \"password\"=>\"asdf\");\r\n  $api = new \\Rhonda\\APIGateway('POST','http://elguapo.eventlink.local/authenticateasdf/',$data, $headers);\r\n  $data = $api->run();\r\n}catch(\\Exception $e){\r\n  $error = new \\Rhonda\\Error();\r\n  echo $error->handle($e);\r\n}\r\n```\r\n\r\n##\\Rhonda\\Strings\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| **verify(** *type_string, test_string* **)**  | Return True/False  |\r\n| **verify_or_error(** *type_string, test_string* **)** | Return True/False or throws exception |\r\n| **normalize(** *string* **)** | Returns normalized string |\r\n\r\n#### String Normalization\r\n * Removes non word characters\r\n * Converts the string to lowercse\r\n * Converts spaces and dashes to underscores\r\n * Trims trailing invalid characters\r\n\r\n#### Verification Types\r\n\r\n| Type  | Description |\r\n| ------------- | ------------- |\r\n| 'email'  | Verifies proper email structure  |\r\n| 'username' | Tests that string only includes a-z 0-9 . - or _ |\r\n\r\n\r\n**Test that a string is a valid email (without exception)**\r\n```php\r\ntry{\r\n  // PASS\r\n  $string = 'test@test.com';\r\n  \\Rhonda\\Strings:: validate('email',$string);\r\n\r\n  // FAIL\r\n  $string = 'test@test';\r\n  \\Rhonda\\Strings:: validate('email',$string);\r\n\r\n  // Catch will not be invoked\r\n}catch(\\Exception $e){\r\n  echo \\Rhonda\\Error:: handle($e);\r\n}\r\n```\r\n\r\n**Test that a string is a valid email (with exception)**\r\n```php\r\ntry{\r\n  // PASS\r\n  $string = 'test@test.com';\r\n  \\Rhonda\\Strings:: validate_or_error('email',$string);\r\n\r\n  // FAIL\r\n  $string = 'test@test';\r\n  \\Rhonda\\Strings:: validate_or_error('email',$string);\r\n\r\n  // Catch will be invoked\r\n}catch(\\Exception $e){\r\n  echo \\Rhonda\\Error:: handle($e);\r\n}\r\n```\r\n\r\n**Normalize a string**\r\n```php\r\n  $input = 'Some TEST-@#string-#$-!@';\r\n  \\Rhonda\\Strings:: normalize($input);\r\n\r\n  // Returns\r\n  some_test_string\r\n```\r\n\r\n##\\Rhonda\\Headers\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| getallheaders()  | Return an Array of all request headers, works for Apache, PHP, and Nginx servers  |\r\n\r\n\r\nRetrieve All request headers as an Array\r\n```php\r\n  $headers = \\Rhonda\\Headers:: getallheaders();\r\n```\r\nOR\r\n```php\r\n  $headers = new \\Rhonda\\Headers();\r\n  $headers->getallheaders();\r\n```\r\n\r\n##\\Rhonda\\Mysql\r\n\r\n\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| real_escape(**String, Array, Object**)  | Escape the thing being passed in by utilizing mysqli and real_escape_string. These methods require a mysql connection so you will need to load a config file into the variable **DB**. real_escape uses **utf-8** as the charset.  When escaping an Array or Object, recursion is used and it will drill through the object/array and escape everything.  |\r\n\r\n**Escape a String**\r\n```php\r\n$string = \"that's all folks\";\r\n$string = \\Rhonda\\Mysql::real_escape($string);\r\n```\r\n\r\n**Escape an Object**\r\n```php\r\n$object = new \\stdClass();\r\n$object->thing = \"it's for real\";\r\n$object = \\Rhonda\\Mysql::real_escape($object);\r\n```\r\n\r\n**Escape an Array**\r\n```php\r\n$array = array(\r\n   \"ray\"=>\"it's escaping arrays\"\r\n , \"ray2\"=>\"escape's this one too\"\r\n);\r\n$array = \\Rhonda\\Mysql::real_escape($ray);\r\n```\r\n\r\n##\\Rhonda\\ServiceChain\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| register(`optional`)  | Register this application or micro service to the service chain.  |\r\n| report(`Boolean`)  | Return a string (default) or an Array of the service chain if parameter is set to TRUE  |\r\n\r\n\r\nIf you are using ServiceChain, `register()` should be one of the first things you do in your application,\r\npreferably immediately after the composer autoload.\r\n\r\nThe default behavior of register is to use your config object named `system` for a property named `host`.\r\n`\\Rhonda\\ServiceChain:: register()` will automatically use that value for the service name.\r\n\r\n(Prefered) Register this micro service to the service chain using a config file\r\n```php\r\n  require_once __DIR__ . '/../vendor/autoload.php';\r\n  \r\n  // Load your configuration file to memory\r\n  \\Rhonda\\Config:: load_file('system', 'path/to/file.json');\r\n  \r\n  // Register your service name\r\n  \\Rhonda\\ServiceChain:: register();\r\n```\r\n\r\nRegister this micro service to the service chain using a parameter\r\n```php\r\n  require_once __DIR__ . '/../vendor/autoload.php';\r\n  \r\n  // Register your service name\r\n  \\Rhonda\\ServiceChain:: register('Service-Name');\r\n```\r\n\r\nGet the current service chain state\r\n```php  \r\n  // \"Returns: service1 => service2 => etc\"\r\n  \\Rhonda\\ServiceChain:: report();\r\n\r\n  // \"Returns: array(\"service1\", \"service2\", \"etc\")\r\n  \\Rhonda\\ServiceChain:: report(TRUE);\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}