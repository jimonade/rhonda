{"name":"Rhonda","tagline":"A composer package that provides solutions to common PHP tasks","body":"#Help me \\Rhonda\r\nRhonda is a composer installable package that provides solutions to common PHP tasks.\r\n\r\n##Install\r\n```shell\r\n  composer require peledies/rhonda:~1\r\n  composer install\r\n```\r\n\r\n##Require in your project\r\nAdd the folowing to your composer.json file\r\n```php\r\n  \"require\": {\r\n    \"peledies/rhonda\": \"~1\"\r\n  }\r\n```\r\n\r\n#Classes and Methods\r\n\r\n##\\Rhonda\\UUID\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| create()  | Create a new UUID  |\r\n```php\r\n  \\Rhonda\\UUID::create();\r\n```\r\nOR\r\n```php\r\n  $uuid = new \\Rhonda\\UUID();\r\n  $uuid->create();\r\n```\r\n\r\n\r\n##\\Rhonda\\RequestBody\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| get()  | Get the provided request body  |\r\n```php\r\n  \\Rhonda\\RequestBody::get();\r\n```\r\nOR\r\n```php\r\n  $request_body = new \\Rhonda\\RequestBody();\r\n  $request_body->get();\r\n```\r\n\r\n\r\n##\\Rhonda\\Error\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| handle()  | Fromat an exception for return. Also writes a pretty stack trace to the error log   |\r\n```php\r\n  try{\r\n    throw new Exception(\"Demo Error Exception\");\r\n  }catch(\\Exception $e){\r\n    echo \\Rhonda\\Error::handle($e);\r\n  }\r\n```\r\n```php\r\n  try{\r\n    throw new Exception(\"Demo Error Exception\");\r\n  }catch(\\Exception $e){\r\n    $error = new \\Rhonda\\Error();\r\n    echo $error->handle($e);\r\n  }\r\n```\r\n\r\n\r\n##\\Rhonda\\Config\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| load_file()  | Load a JSON file into memory as an object for later retrieval  |\r\n| load_object()  | Load an object into memory for later retrieval  |\r\n| get()  | Retrieve a configuration object from memory  |\r\nLoad Object to memory\r\n```php\r\n  $object = new stdClass();\r\n  $object->thing_1 = 'something one';\r\n  $object->thing_2 = 'something two';\r\n  \\Rhonda\\Config::load_object('test_one', $object);\r\n```\r\nLoad JSON file to memory\r\n```php\r\n  // File path is relative to your project root\r\n  $config->load_file('test_two', 'path/to/file.json');\r\n```\r\nRetrieve a configuration object from memory\r\n```php\r\n\\Rhonda\\Config::get('test_one');\r\n```\r\n\r\n\r\n##\\Rhonda\\APIGateway\r\n| Method  | Description |\r\n| ------------- | ------------- |\r\n| run()  | Run a request to an external URL  |\r\n\r\n\r\nMake a request to an external address with custom headers and a request body\r\n```php\r\ntry{\r\n  $headers = array(\"Domain\"=>\"domain_1\", \"Authorization\"=>\"sometoken\");\r\n  $data = (object) array(\"handle\"=>\"demo_1\", \"password\"=>\"asdf\");\r\n  $api = new \\Rhonda\\APIGateway('POST','http://elguapo.eventlink.local/authenticateasdf/',$data, $headers);\r\n  $data = $api->run();\r\n}catch(\\Exception $e){\r\n  $error = new \\Rhonda\\Error();\r\n  echo $error->handle($e);\r\n}\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}